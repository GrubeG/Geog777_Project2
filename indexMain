<html>
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <title>
      Popup with edit action | Sample | ArcGIS API for JavaScript 4.23
    </title>

    <link
      rel="stylesheet"
      href="https://js.arcgis.com/4.23/esri/themes/light/main.css"
    />
    <script src="https://js.arcgis.com/4.23/"></script>

    <style>
      html,
      body,
      #viewDiv {
        padding: 0;
        margin: 0;
        height: 100%;
        width: 100%;
      }

      #info {
        padding: 14px;
        border-radius: 5px;
        width: 35%;
      }
        
      #infoToolbar {
        padding: 14px;
        border-radius: 5px;
        width: 35%;
      }
        
        
    </style>
    <script>
      require([
        "esri/Map",
        "esri/layers/FeatureLayer",
        "esri/widgets/Editor",
        "esri/widgets/LayerList",
        "esri/views/MapView",
        "esri/popup/content/AttachmentsContent",
        "esri/popup/content/TextContent",
        "esri/widgets/Expand",
        "esri/widgets/Home",
        "esri/widgets/Search",
        "esri/Viewpoint",
        "esri/widgets/Locate"
      ], (
        Map,
        FeatureLayer,
        Editor,
        LayerList,
        MapView,
        AttachmentsContent,
        TextContent,
        Expand,
        Home,
        Search,
        Viewpoint,
        Locate
      ) => {
          
          
        // add the park outline featurelayer
        var layerBoundary = new FeatureLayer({
          url: "https://services.arcgis.com/HRPe58bUyBqyyiCt/arcgis/rest/services/seki_boundary/FeatureServer/0",
          //outFields: ["*"],
          title: "Park Boundaries",
          visible: true
        });
          
        // add the park groves featurelayer
        var layerGroves = new FeatureLayer({
          url: "https://services.arcgis.com/HRPe58bUyBqyyiCt/arcgis/rest/services/CA_SEGI_groves/FeatureServer/0",
          //outFields: ["*"],
          title: "Sequoia Groves",
          visible: true,
          popupTemplate: {
            // autocasts as new PopupTemplate()
            title: "Grove_Name",
            overwriteActions: true
          }
        });
        
        // add the park roads featurelayer
        var layerRoads = new FeatureLayer({
          url: "https://services.arcgis.com/HRPe58bUyBqyyiCt/arcgis/rest/services/seki_roads/FeatureServer/0",
          //outFields: ["*"],
          title: "Park Roads",
          visible: true,
          popupTemplate: {
            // autocasts as new PopupTemplate()
            title: "{RDNAME}: </br>{RDCLASS}",
            overwriteActions: true
          }
        });
        
        // add the park trails featurelayer
        var layerTrails = new FeatureLayer({
          url: "https://services.arcgis.com/HRPe58bUyBqyyiCt/arcgis/rest/services/seki_trails/FeatureServer/0",
          //outFields: ["*"],
          title: "Park Trails",
          visible: true,
          popupTemplate: {
            // autocasts as new PopupTemplate()
            title: "{TRLNAME}: </br>{TRLCLASS}",
            overwriteActions: true
          }
        });
        
        // add the park points of interest featurelayer
        var layerPOI = new FeatureLayer({
          url: "https://services.arcgis.com/HRPe58bUyBqyyiCt/arcgis/rest/services/seki_poi/FeatureServer/0",
          //outFields: ["*"],
          title: "Points of Interest",
          visible: true,
          popupTemplate: {
            // autocasts as new PopupTemplate()
            title: "{POINAME}: </br>{POITYPE}",
            overwriteActions: true
          }
        });
        
        
        
        // add the park fire history featurelayer
        var layerFireHistory = new FeatureLayer({
          url: "https://services.arcgis.com/HRPe58bUyBqyyiCt/arcgis/rest/services/seki_fhst/FeatureServer/0",
          //outFields: ["*"],
          title: "Fire History",
          visible: false
        });
          
        // Create the Map
        const map = new Map({
          basemap: "topo-vector",
          layers: [layerFireHistory, layerGroves, layerPOI, layerTrails, layerRoads, layerBoundary]
        });
          
        let editor, features, editExpand;
          
          
         // *****************************************************
        // add homeButton and expand widgets to UI
        // *****************************************************
        function setupView() {
            
          // set home button view point to initial extent
          var homeButton = new Home({
            view: view
          });
          view.ui.add(homeButton, "top-left");

          // LayerList
          layerList = new LayerList({
              container: document.createElement("div"),
              view: view
            });
            
            layerListExpand = new Expand({
              expandIconClass: "esri-icon-layer-list",
              expandTooltip: "Expand LayerList",
              view: view,
              content: layerList
            });
            view.ui.add(layerListExpand, {
                position: "bottom-left",
                index: 1
            });
            
          var locateBtn = new Locate({
            view: view,
            goToOverride: function(view, options) {
                options.target.scale = 1500;
                return view.goTo(options.target);
          }
          });
            
          // Add the locate widget to the top left corner of the view
          view.ui.add(locateBtn, {
            position: "top-left"
          });
            
          //add text information
          view.ui.add("info", {
            position: "top-left",
            //index: 1
            });
        
        //add text information
          view.ui.add("infoToolbar", {
            position: "top-right",
            index: 2
            });
            
        }
          
          
          
        // *****************************************************
        // Creates actions in the LayerList
        // *****************************************************

        function defineActions(event) {
          // The event object contains an item property.
          // is is a ListItem referencing the associated layer
          // and other properties. You can control the visibility of the
          // item, its title, and actions using this object.

          const item = event.item;

          if (item.title === "SEKI Layers") {
            // An array of objects defining actions to place in the LayerList.
            // By making this array two-dimensional, you can separate similar
            // actions into separate groups with a breaking line.

            item.actionsSections = [
              [
                {
                  title: "Go to full extent",
                  className: "esri-icon-zoom-out-fixed",
                  id: "full-extent"
                },
                {
                  title: "Layer information",
                  className: "esri-icon-description",
                  id: "information"
                }
              ],
//              [
//                {
//                  title: "Increase opacity",
//                  className: "esri-icon-up",
//                  id: "increase-opacity"
//                },
//                {
//                  title: "Decrease opacity",
//                  className: "esri-icon-down",
//                  id: "decrease-opacity"
//                }
//              ]
            ];
          }
        }
          
          
        /*************************************************************
         * The PopupTemplate content is the text that appears inside the
         * popup. Bracketed {fieldName} can be used to reference the value
         * of an attribute of the selected feature. HTML elements can be
         * used to provide structure and styles within the content.
         **************************************************************/
        const editThisAction = {
          title: "Edit feature",
          id: "edit-this",
          className: "esri-icon-edit"
        };

        // Create a popupTemplate for the featurelayer and pass in a function to set its content and specify an action to handle editing the selected feature
        const template = {
          title: "User Name: {UserName}",
          content: OverallConLevel,
          fieldInfos: [
            {
              fieldName: "UserName"
            },
            {
              fieldName: "OverallCon"
            }
          ],
          actions: [editThisAction]
        };

        // Function that creates two popup elements for the template: attachments and text
        function OverallConLevel(feature) {
          // 1. Set how the attachments should display within the popup
          const attachmentsElement = new AttachmentsContent({
            displayType: "list"
          });

          const textElement = new TextContent();

//          const level = feature.graphic.attributes.OverallCon;
//          const green =
//            "<b><span style='color:green'>" + level + "</span></b>.";
//          const purple =
//            "<b><span style='color:purple'>" + level + "</span></b>.";
//          const red = "<b><span style='color:red'>" + level + "</span></b>.";

          // If the feature's "OverallCon" attribute is a specific value, set it a certain color
          // "easy" = green
          // "medium" = purple
          // "hard" = red
//          switch (level) {
//            case "easy":
//              textElement.text =
//                "The {UserName} trail has a OverallCon level of " + green;
//              return [textElement, attachmentsElement];
//              break;
//            case "medium":
//              textElement.text =
//                "The {UserName} trail has a OverallCon level of " + purple;
//              return [textElement, attachmentsElement];
//              break;
//            case "hard":
//              textElement.text =
//                "The {UserName} trail has a OverallCon level of " + red;
//              return [textElement, attachmentsElement];
//          }
        }

        var layerTrees = new FeatureLayer({
          url: "https://services.arcgis.com/HRPe58bUyBqyyiCt/arcgis/rest/services/seki_trees/FeatureServer/0",
          outFields: ["*"],
          popupTemplate: template
        });
        map.add(layerTrees);

        // Create the MapView
        const view = new MapView({
          container: "viewDiv",
          map: map,
          zoom: 10,
          center: [-118.5, 36.65]
        });
          
        setupView();
          
        // *****************************************************
        // Create the LayerList widget with the associated actions
        // and add it to the top-right corner of the view.
        // *****************************************************
        
//        view.when(() => {
//          // Create the LayerList widget with the associated actions
//          // and add it to the top-right corner of the view.
//
//          var layerList = new LayerList({
//            view: view,
//            container: document.createElement("layerList"),
//            // executes for each ListItem in the LayerList
//            listItemCreatedFunction: defineActions
//          });
//
//          // Event listener that fires each time an action is triggered
//
//          layerList.on("trigger-action", (event) => {
//            // The layer visible in the view at the time of the trigger.
//            var visibleLayer = OtherGroupLayer.visible ? OtherGroupLayer : censusLayer;
//
//            // Capture the action id.
//            const id = event.action.id;
//
//            if (id === "full-extent") {
//              // if the full-extent action is triggered then navigate
//              // to the full extent of the visible layer
//              view.goTo(visibleLayer.fullExtent).catch((error) => {
//                if (error.name != "AbortError") {
//                  console.error(error);
//                }
//              });
//            }
////              else if (id === "information") {
////              // if the information action is triggered, then
////              // open the item details page of the service layer
////              window.open(visibleLayer.url);
////            } else if (id === "increase-opacity") {
////              // if the increase-opacity action is triggered, then
////              // increase the opacity of the GroupLayer by 0.25
////
////              if (demographicGroupLayer.opacity < 1) {
////                demographicGroupLayer.opacity += 0.25;
////              }
////            } else if (id === "decrease-opacity") {
////              // if the decrease-opacity action is triggered, then
////              // decrease the opacity of the GroupLayer by 0.25
////
////              if (demographicGroupLayer.opacity > 0) {
////                demographicGroupLayer.opacity -= 0.25;
////              }
////            }
//          });
//
//          // Add widget to the top right corner of the view
//          view.ui.add(layerList, "bottom-left");
//        });
          
        // *****************************************************
        // Create the Search widget with the associated actions
        // and add it to the top-right corner of the view.
        // *****************************************************
          
        const searchWidget = new Search({
          view: view,
          allPlaceholder: "Enter Location",
          includeDefaultSources: false,
          sources: [
            {
              layer: layerPOI,
              searchFields: ["POINAME"],
              displayField: "POINAME",
              exactMatch: false,
              outFields: ["POINAME", "POITYPE"],
              name: "Point of Interest",
              zoomScale: 10000,
              placeholder: "Please enter feature name"
//              resultSymbol: {
//                type: "picture-marker", // autocasts as new PictureMarkerSymbol()
//                url: "https://developers.arcgis.com/javascript/latest/sample-code/widgets-search-multiplesource/live/images/senate.png",
//                height: 36,
//                width: 36
//              }
            },
            {
              layer: layerGroves,
              searchFields: ["Grove_Name"],
              //suggestionTemplate: "{Name}, Party: {Party}",
              exactMatch: false,
              outFields: ["Grove_Name"],
              placeholder: "example: Atwell",
              name: "Sequoia Grove",

            },
            {
              layer: layerTrails,
              searchFields: ["TRLNAME"],
              //suggestionTemplate: "{Name}, Party: {Party}",
              exactMatch: false,
              outFields: ["TRLNAME", "TRLCLASS"],
              placeholder: "example: Giant Forest",
              name: "SEKI Trails",

            },
          ]
        });

        // Add the search widget to the top left corner of the view
        view.ui.add(searchWidget, {
          position: "top-right"
        });
      
          
        // *****************************************************
        // Create the Editor widget with the associated actions
        // and add it to the top-right corner of the view.
        // *****************************************************

        view.when(() => {
          // Create the Editor with the specified layer and a list of field configurations
          editor = new Editor({
            view: view,
            container: document.createElement("div"),
            layerInfos: [
              {
                layer: layerTrees,
                formTemplate: {
                  // autocasts to FormTemplate
                  elements: [
                    // autocasts to FieldElement
                    {
                      type: "field",
                      fieldName: "UserName",
                      label: "User name",
                      editable: true
                    },
                    {
                      type: "field",
                      fieldName: "UserType",
                      label: "User Type",
                      hint: "Select Role"
                    },
                    {
                      type: "field",
                      fieldName: "GroveName",
                      label: "Grove Name",
                      hint: "Where is the tree located?"
                    },
                    {
                      type: "field",
                      fieldName: "TreeDiam",
                      label: "Tree Diameter",
                      hint: "What is the trunk thickness?"
                    },
                    {
                      type: "field",
                      fieldName: "SurFuel",
                      label: "Surface Fuel",
                      hint: "How much built up fuel is there?"
                    },
                    {
                      type: "field",
                      fieldName: "BurnDamage",
                      label: "Burn Damage",
                      hint: "What is the burn damage on the tree?"
                    },
                    {
                      type: "field",
                      fieldName: "OverallCon",
                      label: "Overall Condition",
                      hint: "What is the overall condition?"
                    },
                    
                  ]
                }
              }
            ]
          });
            
          // Execute each time the "Edit feature" action is clicked
          function editThis() {
            // If the EditorViewModel's activeWorkflow is null, make the popup not visible
            if (!editor.viewModel.activeWorkFlow) {
              view.popup.visible = true;
              // Call the Editor update feature edit workflow

              editor.startUpdateWorkflowAtFeatureEdit(
                view.popup.selectedFeature
              );
              view.ui.add(editor, "top-right");
              view.popup.spinnerEnabled = true;
            }

            // We need to set a timeout to ensure the editor widget is fully rendered. We
            // then grab it from the DOM stack
            setTimeout(() => {
              // Use the editor's back button as a way to cancel out of editing
              let arrComp = editor.domNode.getElementsByClassName(
                "esri-editor__back-button esri-interactive"
              );
              if (arrComp.length === 1) {
                // Add a tooltip for the back button
                arrComp[0].setAttribute(
                  "title",
                  "Cancel edits, return to popup"
                );
                // Add a listener to listen for when the editor's back button is clicked
                arrComp[0].addEventListener("click", (evt) => {
                  // Prevent the default behavior for the back button and instead remove the editor and reopen the popup
                  evt.preventDefault();
                  view.ui.remove(editor);
                  view.popup.open({
                    features: features
                  });
                });
              }
            }, 150);
          }

          // Event handler that fires each time an action is clicked
          view.popup.on("trigger-action", (event) => {
            if (event.action.id === "edit-this") {
              editThis();
            }
          });
            
        //expand widget
          editExpand = new Expand({
            expandIconClass: "esri-icon-edit",
            expandTooltip: "Expand Edit",
            expanded: true,
            view: view,
            content: editor
          });
          view.ui.add(editExpand, "top-right");
          //view.ui.add([editExpand, layerList], "bottom-right");
            
        });

        // Watch when the popup is visible
        view.popup.watch("visible", (event) => {
          // Check the Editor's viewModel state, if it is currently open and editing existing features, disable popups
          if (editor.viewModel.state === "editing-existing-feature") {
            view.popup.close();
          } else {
            // Grab the features of the popup
            features = view.popup.features;
          }
        });

        layerTrees.on("apply-edits", () => {
          // Once edits are applied to the layer, remove the Editor from the UI
          view.ui.remove(editor);

          // Iterate through the features
          features.forEach((feature) => {
            // Reset the template for the feature if it was edited
            feature.popupTemplate = template;
          });

          // Open the popup again and reset its content after updates were made on the feature
          if (features) {
            view.popup.open({
              features: features
            });
          }

          // Cancel the workflow so that once edits are applied, a new popup can be displayed
          editor.viewModel.cancelWorkflow();
        });
          
        

        
      });
    </script>
  </head>

  <body>
    <div id="viewDiv"></div>
    <div id="info" class="esri-widget">
      <h3>Select a feature to display its popup</h3>
      <h4>
        Edit by clicking on the "Edit feature" action within the
        popup.
      </h4>
    </div>
    <div id="infoToolbar" class="esri-widget">
        <h3>Sample text</h3>
    </div>
  </body>
</html>